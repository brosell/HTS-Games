/*
  StringTokenizer.cpp - class that implements a String Tokenizer

---------------------------------------------------
		Revision History
---------------------------------------------------

$Log: StringTokenizer.cpp,v $
Revision 1.1  2003-09-09 23:11:25-04  hey_now
<>

Revision 1.0  2003-01-23 21:23:01-05  hey_now
Initial revision

   
      Rev 1.6   25 Jun 2001 10:07:08   BRosell
   Smarter
   
      Rev 1.5   05 May 2000 14:49:54   BRosell
   continued development
   
      Rev 1.4   21 Mar 2000 15:41:22   BRosell
   The great const
   
      Rev 1.3   04 Feb 2000 14:28:22   BRosell
   Changed malloc to new and free to delete
   
      Rev 1.2   Sep 13 1999 17:06:08   BRosell
   made some fixes to trim()
   
      Rev 1.1   30 Jun 1999 11:32:38   BRosell
   added Logging

*/

#include "StringTokenizer.h"

#include <string.h>
#include "Log.h"

StringTokenizer::StringTokenizer(CStdString str, CStdString delims)
{
  char* tok = strtok(str.Buffer(), delims);
  while (tok != 0)
  {
    m_tokens.push_back(tok);
    tok = strtok(0, delims);
  }
  str.BufferRel();
}

StringTokenizer::~StringTokenizer()
{
}


bool StringTokenizer::hasMoreTokens()
{
  return (m_tokens.size() > 0);
}


int StringTokenizer::countTokens()
{
  return m_tokens.size();
}


CStdString StringTokenizer::nextToken()
{
  lassert(hasMoreTokens());
  string ret = m_tokens.front();
  m_tokens.pop_front();
  return ret;
}


char* trim(char* str)
{
	int c=0;
	int l=strlen(str);
	char* s=str;
	char* t;

	char buf[2048];

	if (strlen(str)==0)
		return str;

	while ( strchr(" \n\t\v\r", *s) != NULL || *s==0 )
		s++;

	strcpy(buf,s);

	t=buf+strlen(buf);

	if (t==0)
	{
		strcpy(str,buf);
		return str;
	}


	while ( strchr(" \n\t\v\r\0", *t) != NULL )
		t--;

	*(++t)='\0';

	strcpy(str,buf);
	
	return str;
}

