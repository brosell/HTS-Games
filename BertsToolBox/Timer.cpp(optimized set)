#pragma warning (disable : 4786)
#include "Timer.h"
#include "Log.h"

set<Timer*, CompareTimer> Timer::s_activeTimers;
ObjectCache<Timer, HasReclaim> Timer::s_timerCache(100);

HTimer Timer::create(int id, int millis, Delegate* delegate, void* param, bool recurring)
{
  Timer* timer = new Timer;
  lassert(timer != 0);
  timer->m_event.setId(id);
  timer->m_event.setParam( (UQUADBYTE)param );
  timer->m_millis = millis;
  timer->m_expires = timeGetTime() + millis;
  timer->m_delegate = delegate;
  timer->m_recurring = recurring;

  lassert(s_activeTimers.find(timer) == s_activeTimers.end());
  s_activeTimers.insert(timer);

  return (HTimer)timer;
}

int Timer::tick()
{
  int ret = 0;
  if (s_activeTimers.size() == 0)
  {
    return ret;
  }

  DWORD now = timeGetTime();
  set<Timer*, CompareTimer>::iterator iTimer = s_activeTimers.begin();
  Timer* timer = *iTimer;
  while (s_activeTimers.size() != 0 && timer->m_expires <= now)
  {
    s_activeTimers.erase(iTimer);
    timer->expire();
    iTimer = s_activeTimers.begin();
    timer = *iTimer;
    ret++;
  }
  return ret;
}


bool stopTest(Message* e);
bool timeFunc(Message* e);

bool ___timerTesting = false;
NonTypeDelegate timeDel(timeFunc);
NonTypeDelegate testDone(stopTest);

bool stopTest(Message* e)
{
  ___timerTesting = false;
  return  true;
}

bool timeFunc(Message* e)
{
  static unsigned int count = 0;
  count++;
  if (count % 10000 == 0)
  {
//    char buf[255];
//    sprintf(buf, "Number of Active Timers: %d", Timer::getRunningTimerCount());
//    logError(buf, Inform);
    cerr << ".";
  }
  Timer::create(1, rand()%1000, &timeDel, false);
  return true;
}

void testTimer(int count)
{
  srand(1234); // need consistancy
  char buf[255];
  int c;

  // let test run for 30 seconds
  Timer::create(10000, 30000, &testDone, false);

  //HTimer timers[200];
  StopWatch phase1;
  for (c=0; c<count; c++)
  {
    phase1.start();
    Timer::create(c, rand()%1000, &timeDel, false);
    phase1.stop();
  }
  

  sprintf(buf, "Phase1: ElapsedTime: %d (average: %f)", phase1.getElapsedTime(), phase1.getAverage());
  logError(buf, Inform);

  sprintf(buf, "Number of Active Timers: %d", Timer::getRunningTimerCount());
  logError(buf, Inform);


  int totalFires=0;
  StopWatch phase2;
  
  ___timerTesting = true;
  while (___timerTesting)
  {
    phase2.start();
    totalFires += Timer::tick();
    phase2.stop();
  }
  

  cerr << endl;

  sprintf(buf, "Phase2: ElapsedTime: %d (average of %d times: %f)\nTotalFires = %d", phase2.getElapsedTime(), phase2.getRunCount(), phase2.getAverage(), totalFires);
  logError(buf, Inform);

  sprintf(buf, "Number of Active Timers: %d", Timer::getRunningTimerCount());
  logError(buf, Inform);


}

