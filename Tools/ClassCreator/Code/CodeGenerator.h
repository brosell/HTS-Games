/* ****************************************************************************
 *
 *  CodeGenerator.h
 *  Created by John F. Hubbard, on Sat Aug 12 2000, 16:49:08 PST
 *
 *  Copyright (c) 2000, ATD Azad Technology Development Corporation
 *
 *            The Reliable Software Outsource Resource
 *        You hire us, we do it for you, and we do it right.
 *
 *                       www.azadtech.com
 *
 *  Permission is granted to use this code without restriction,
 *  as long as this copyright notice appears in all source files.
 *
 *  File Contents: Interface and documentation of the CodeGenerator class, and
 *  also the interface and documentation of the some helper methods that are
 *  common to the code_gen namespace.  (This allows the programmer to include
 *  CodeGenerator.h, and use generally useful methods such as
 *  code_gen::StringToUpper, without the need to instantiate anything.)
 *
 * %version: 2.28 %
 * %date_modified: Thu Nov 16 19:44:34 2000 %
 * %created_by: jhubbard %
 *
 *************************************************************************** */
#ifndef ATD_CODE_GEN_CODEGENERATOR_H
#define ATD_CODE_GEN_CODEGENERATOR_H

#include <sstream>
#include "DigestedCommands.h"

namespace code_gen
{

 /**  Purpose: Part of the Builder pattern incarnation for ClassCreator.
 *  The CodeGenerator class interface prescribes the way in which a source code
 *  file is to be generated; specifically, it has a method call for each
 *  piece of the generated code.  Derived classes implement each method.
 *
 *  This is a little different from the classic Builder pattern, in that this
 *  specific CodeGenerator class provides both an interface and a default
 *  implementation.  Furthermore, for classes that override the defaults, a
 *  certain amount of assistance (in the form of shared member variables and
 *  common member helper routines) is provided.
 *
 *  Another note: normally, the client code that creates CodeGenerator objects
 *  would keep track of all of the pieces (such as the names of different
 *  generated files). However, there is a close relationship between the
 *  code that is generated by classes derived from CodeGenerator.  To see why,
 *  consider that the implementation file (*.cpp) has to have a line of code
 *  that reads "#include "headerfilename.h".
 *
 *  This information is originally passed in via the command line. It is then
 *  loaded into a DigestedCommands class object.  From then on, accessor
 *  methods in the DigestedCommands objects provide efficient access to the
 *  meaning of the original commands.
 */
 class CodeGenerator
{
public:
    CodeGenerator(const DigestedCommands& commands);
    virtual ~CodeGenerator();

	/** Note that GenCommentHeader, GenPreface, GenCodeBody, and
	 * GenEpilog are virtual methods, with a default implementation that does
	 * nothing. Derived classes can therefore easily leave out unwanted parts of
	 * a generated file, simply by not overriding one or more of these methods.
	 */
	virtual void GenCommentHeader() 	throw(std::string) {};
	/// GenPreface
	virtual void GenPreface() 			throw(std::string) {};
	/// GenCodeBody. Class name is passed in, to allow for multiple classes per file.
	virtual void GenCodeBody(const std::string& strClassName)	throw(std::string) {};
	/// GenEpilog
	virtual void GenEpilog() 			throw(std::string) {};

protected:
	/** This is a helper method that factors out common actions that occur
	 *  during the generation of the comment block at the top of each
	 *  generated file.
	 */
	void GenerateDefaultCommentHeader(const std::string& strFileName,
									  std::ostringstream& ostCustom);

	/** This is a helper method that factors out common actions that occur
	 *  during the generation of the #include statements that precede the
	 *  code body (and is therefore only useful for files that use #include).
	 */
	void GenerateDefaultPreface(	  const std::string& strFileName,
							    	  std::ostringstream& ostCustom);

	/// This is a helper method, used for the #ifdef statements
	std::string CreateUniqueName();

	/** Due to order of construction, each derived class is expected to contain
	 *  its own output file stream.  Getting a reference to that stream is
	 *  therefore delegated to the derived classes (because this pure virtual
	 *  GetOstream() requires each derived class to override it and provide
	 *  an implementation).
	 */
	virtual std::ostream& 	GetOstream() = 0;

	const DigestedCommands& mCommands;
};

// Helper methods common to the code_gen namespace:

/// This helper method returns a conveniently formatted current date and time.
std::string DateStamp();

/** This is a helper method that returns a copy of the input string, but
 *  modified to all upper case.
 */
std::string StringToUpper(const std::string& strInput);

} // end of code_gen namespace

#endif // ifndef ATD_CODE_GEN_CODEGENERATOR_H
